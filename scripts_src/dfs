#! /usr/bin/env python
# dfs - frontend script for the Double Force Scanning method for elastic network models
# Copyright (C) 2017 Matteo Tiberti <matteo.tiberti@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/li.censes/>.

import prody as pd
from prody import SelectionError
from dfsutils import *
import argparse
from argparse import RawTextHelpFormatter
from prody import LOGGER as log
import numpy as np
import time
import socket
import getpass
import os
import StringIO


intro = """dfs implements the Double Force Scanning method for the identification 
of compensatory mutations in proteins as detailed in:

    M. Tiberti, A. Pandini, F. Fraternali, A. Fornili, 
    "In silico identification of rescue sites by double force scanning", 
    Bioinformatics, 34(2), 2018, 207â€“214


The method uses Linear Response Theory on Anisotropic Network Models (ANM)
to calculate a rescuability score S between pairs of residues, one that is 
considered to be a pathogenic mutation to be compensated (First Site, FS) 
and another that is a secondary mutation site (Second Site, SM), which 
represents a potential compensatory site. Positive values of S indicate
a compensatory effect.

By default, DFS will be run with the following options:

ANM model
    atom selection (-s): 'protein and name CA'
    distance cut-off (-c): 15.0 A
    force constant (-g): 1.0
Force application
    number of forces: 12
    directions of forces: Fibonacci lattice
    Force magnitude: 10.0 kcal/mol/A
    selection of atoms on which forces will be applied
        for both sites: 'protein and name CA'
Calculation of the rescuability score
    conformational distance measure (-d): dRMSD (distance RMSD)
    fitting operation (-F): none
    fitting operation selection string (-a): none
    include force application site for the calculation of dRMSD (-x): no
    force mode (-t): constant force and constant displacement

Examples
    
    ./dfs -p input.pdb

"""

outro=""

scores =    {   "rmsd": ScoreRMSD,
                "drmsd": ScoreDRMSD,
            }

fitting_operations =    {   "lsq_fit" : LsqFitting,
                            "none" : None
                        }

default_config_string="""[ first sites atom sets ]
refset1:        name CA and protein
[ first sites force sets ]
refset1:        fibonacci_lattice 12 10
[ second sites atom sets ]
set1:   name CA and protein
[ second sites force sets ]
set1:   fibonacci_lattice 12 10
[ options ]
"""

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=intro,
                                     epilog=outro,
                                     formatter_class=RawTextHelpFormatter,
                                     add_help=False)
    required_options = parser.add_argument_group('required arguments')
    optional_options = parser.add_argument_group('optional arguments')

    required_options.add_argument("-p", "--pdb", type=str, help="input PDB file",
                                  required=True, dest="PDB")

    optional_options.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    optional_options.add_argument("-s", "--selection", dest="selection_string", type=str, 
                        default=["protein and name CA"], help="CHARMM-style selection of \
atoms to be used to build the ANM model. The final \
selection should contain at most one CA atom per \
residue. (default is: protein and name CA)", nargs='+')
    optional_options.add_argument("-v", "--verbose", dest="verbose", 
                        help="toggle verbose mode", action='store_true',
                        default=False)
    optional_options.add_argument("-c", "--cutoff", dest="anm_cutoff", default=15.0, \
                        type=float, help="Distance cut-off for generating the \
topology of ANM in A (default is 15.0)")
    optional_options.add_argument("-g", "--gamma", dest="anm_gamma", default=1.0, 
                        type=float, help="Spring force constant for ANM \
in kcal/mol/A^2 (default is 1.0)")
    optional_options.add_argument("-m", "--write-hessian", dest="hessian_output", 
                        nargs='?', const="hessian.dat", type=str, default=None, 
                        help="Save Hessian matrix of the ANM model (default: \
matrix.dat; plain text format)")
    optional_options.add_argument("-M", "--load-hessian", dest="hessian_input", type=str, 
                        default=None, help="Load hessian matrix from file \
in plain text format instead of calculating it")
    optional_options.add_argument("-i", "--write-covariance", dest="covariance_output", 
                        nargs='?', const="covariance.dat", type=str, 
                        default=None, help="Save the covariance matrix from \
the ANM used to calculate the effect of force \
application (default: covariance.dat)")
    optional_options.add_argument("-I", "--load-covariance", dest="covariance_input", 
                        type=str, default=None, help="Load covariance \
matrix in plain text format instead of calculating \
it. The hessian matrix will not be calculated if \
this flag is used.")
    optional_options.add_argument("-f", "--forces", dest="config", default=None, 
                        help="Configuration file for DFS runs. Defaults will \
be used if such a file is not specified.")
    optional_options.add_argument("-F", "--fitting", dest="fitting_operation", 
                        default="none", action="store", type=str, 
                        choices=fitting_operations.keys(), help="superimpose \
the displaced and original geometries before calculating scores (default: none)")
    optional_options.add_argument("-a", "--fit-selection", dest="fit_selection", 
                        default=["protein and name CA"], help="Selection string that selects \
the group that will be used for fitting (default: protein and name CA)")
    optional_options.add_argument("-d", "--conformational-distance", 
                        dest="conformational_distance", choices=scores.keys(), 
                        help="Which conformational distance measure will be \
used (default: drmsd)", default="drmsd")
    optional_options.add_argument("-n", "--np", dest="np", default=1, type=int, 
                        action="store", help="Number of cores to be used \
for calculation")
    optional_options.add_argument("-w", "--write", dest="write", nargs='*', type=str, 
                        metavar="WRITABLE",
                        choices=writable_data, help="Space-separated list of \
data that should be saved in the output details file. Choose between \
force_vectors, displacements, displacements_after_fit, perturbed_coordinates, \
fitted_perturbed_coordinates, score_matrix, raw_score_matrix, \
conformational_distance_matrixes, scaling_factors. 'all' just saves \
everything. Default is %s. This option will be ignored if -o is not supplied" % "none", default="")
    optional_options.add_argument("-x", "--include-application-sites", 
                        dest="exclude_sites", action='store_false', 
                        default=True, help="Include force application sites \
in the calculation of scores (by default they are not)")
    optional_options.add_argument("-S", "--output-scores", dest="output_scores", 
                        default="scores", type=str,  action="store", 
                        help="Suffix for the filename of the rescuability score \
matrices (default is scores)")
    optional_options.add_argument("-o", "--output", dest="output_fname", 
                        default=None, type=str, action="store", 
                        help="Suffix to be used for the filename of the HDF5 \
details file")
    optional_options.add_argument("-t", "--force_mode", dest="force_mode", nargs='?', 
                        type=str, default="both", choices=["fixed_forces",
                        "fixed_displacements", "both"], help="Force mode to be \
used (default: both)")
    optional_options.add_argument("-q", "--precision", dest="precision", default=3, 
                        type=int, help="Number of decimal places to be used \
in .h5 detail files (-1 for lossless; default: 3)")
                        
    args = parser.parse_args()
    
    if args.verbose:
        pd.confProDy(verbosity='info')
    else:
        pd.confProDy(verbosity='warning')    

    if args.output_fname is None:
        do_write = None
    elif args.write == [] or (ALL in args.write):
        if len(args.write) > 1:
            log.warning("all was specified in option --write, together with others; all will be used.")
        do_write = writable_data[1:]
    else:
        do_write = args.write
    if do_write is not None:
        log.info("this information will be written to file: %s" % (", ".join(list(do_write))))

    if args.covariance_input and args.hessian_input:
        log.error("You cannot specify covariance matrix and hessian at the same time. Exiting...")
        exit(1)

    args.selection_string = " ".join(args.selection_string)
    args.fit_selection = " ".join(args.selection_string)

    # 1. Parse PDB
    try:
        structure = pd.parsePDB(args.PDB)
    except:
        log.error("Couldn't parse your model file (%s); Exiting..." % args.PDB)
        exit(1)


    assign_masses(structure)

    # 2. select atoms for building the model
    log.info("Selection string is %s" % args.selection_string)
    try:
        atoms = structure.select(args.selection_string)
    except SelectionError:
        log.error("Your selection string was invalid. Exiting...")
        exit(1)
    if not atoms:
        log.error("Your selection string resulted in no atoms being selected in your structure. Exiting...")
        exit(1)
    if len(atoms) < 2:
        log.error("Your selection string resulted in less than two atoms being selected in your structure. Exiting...")
        exit(1)

    if args.covariance_input is not None:
        try:
            covariance = np.load(args.covariance_input)
        except:
            log.error("File %s is not readable or in wrong format. Exiting...")
            exit(1)
        assert(covariance.shape[0] == len(atoms)*3)
        log.warning("The covariance matrix has been loaded from file; therefore gamma and cut-off options will be ignored.")
    else:
        hessian = None
        if args.hessian_input is not None:
            for load_function in [np.load, np.loadtxt]:
                try:
                    hessian = load_function(args.hessian_input)
                    break
                except:
                    continue
            else:
                log.error("File %s is not readable or in wrong format. Exiting..." % args.hessian_input)
                exit(0)

            assert(hessian.shape[0] == 3*len(atoms))
            log.warning("Hessian has been loaded from file; therefore gamma and cut-off options will be ignored.")

        anm = pd.dynamics.ANM(atoms)

        # Build Hessian

        if hessian is None:
            anm.buildHessian(atoms, cutoff=args.anm_cutoff, gamma=args.anm_gamma)
        else:
            anm.setHessian(hessian)

        # Write Hessian to text file
        if args.hessian_output:
            safe_savenpy(args.hessian_output, anm.getHessian())

        # Calculate NMs
        anm.calcModes(n_modes = anm.numDOF())

        # Write eigenvectors to NMD file
        #safe_savenmd(args.nmd_output, anm, atoms)

        covariance = anm.getCovariance()
        if args.covariance_output:
            safe_savenpy(args.covariance_output, covariance)

    if do_write is not None:

        attrs = {}
        attrs['hostname'] = socket.gethostname()
        attrs['user'] = getpass.getuser()
        attrs['date'] = time.strftime("%c")
        attrs['directory'] = os.getcwd()

        attrs['input_PDB'] = args.PDB
        attrs['atom_selection'] = args.selection_string
        attrs['gamma'] = args.anm_gamma
        attrs['cutoff'] = args.anm_cutoff

        attrs['cdm'] = args.conformational_distance
        attrs['fitting'] = args.fitting_operation
        attrs['fitting_selection'] = args.fit_selection
        attrs['available_data'] = ",".join(do_write)


    else:
        fh = None
        attrs = None



    score_kwargs = { "exclude_sites" : args.exclude_sites,
                    }

    if args.force_mode == "fixed_force" or args.force_mode == "both":

        if args.config is None:
            log.info("Default settings will be used for forces as no input \
file was provided.")
            config = StringIO.StringIO(default_config_string)
        else:
            config = args.config
            
        if do_write is not None:
            output_fname = "%s_%s" % ("fixed_force", args.output_fname)
        else:
            output_fname = None
        output_scores = "%s_%s" % ("fixed_force", args.output_scores)


        dfs_job = DFSJob(
                            structure,
                            atoms,
                            atoms,
                            np.matrix(covariance),
                            config,
                            fitting_operation   = fitting_operations[args.fitting_operation],
                            fitting_string      = args.fit_selection,
                            scoring_function    = scores[args.conformational_distance],
                            scoring_function_name = args.conformational_distance,
                            do_write            = do_write,
                            score_kwargs        = score_kwargs,
                            options             = {"scale_forces_by_reference_cd" : False}
                        )

        dfs_job.run(details_output_fname=output_fname, metadata=attrs, nprocs=args.np)        

        score_matrix, score_matrix_min, score_matrix_max = dfs_job.get_score_matrix()

        if do_write and SCORES in do_write:
            fh = h5py.File(output_fname, 'r+')
            fh.create_dataset(SCORES, data=score_matrix)
            fh.close()

        np.savetxt("%s.dat" % output_scores, score_matrix, fmt="%.5f",)

    if args.force_mode == "fixed_displacements" or args.force_mode == "both":

        if args.config is None:
            log.info("Default settings will be used for forces as no input \
file was provided.")
            config = StringIO.StringIO(default_config_string)
        else:
            config = args.config

        if do_write is not None:
            output_fname = "%s_%s" % ("fixed_displacements", args.output_fname)
        else:
            output_fname = None
        output_scores = "%s_%s" % ("fixed_displacements", args.output_scores)        

        dfs_job = DFSJob(
                        structure,
                        atoms,
                        atoms,
                        np.matrix(covariance),
                        config,
                        fitting_operation   = fitting_operations[args.fitting_operation],
                        fitting_string      = args.fit_selection,
                        scoring_function    = scores[args.conformational_distance],
                        scoring_function_name = args.conformational_distance,
                        do_write            = do_write,
                        score_kwargs        = score_kwargs,
                        options             = {"scale_forces_by_reference_cd" : True}
                    )

        dfs_job.run(details_output_fname=output_fname, metadata=attrs, nprocs=args.np)

        score_matrix, score_matrix_min, score_matrix_max = dfs_job.get_score_matrix()
       
	if do_write and SCORES in do_write:
            fh = h5py.File(output_fname, 'r+')
            fh.create_dataset(SCORES, data=score_matrix)
            fh.close()

        np.savetxt("%s.dat" % output_scores, score_matrix, fmt="%.5f",)

    log.info("All done! Exiting...")
