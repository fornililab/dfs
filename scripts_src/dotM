#!/usr/bin/env python
# dotM - calculate RMSIP between dfs displacements and normal modes.
# Copyright (C) 2015 Matteo Tiberti <matteo.tiberti@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/li.censes/>.


import numpy as np
import prody as pd
import h5py
import argparse
from prody import LOGGER as log
from itertools import product
from dfsutils import P_XYZ, FP_XYZ, RAW_SCORES

intro = """dotM calculates the Root Mean Square Inner Product (RMSIP) between
the modes calculated from the ANM and the displacement vectors calculated by 
DFS for a given pair of residue and force directions. (i.e. the displacements
obtained by the difference of coordinates between a structure in which
two forces are applied and a structure in which a single force is applied).
The RMSIP is a measure of overlap between the two different sets of vectors
 and ranges from 0 to 1, where 1 indicates perfectly superimposable sets.
"""

outro="""The script requires as input i) one details HDF5 file written by the 
main dfs script and ii) the original unperturbed PDB file that was given to dfs
as input. There's no need to specify the parameters for the ANM model on which
normal modes are calculated, as they are read from the HDF5 file. As displace-
ments are calculated by forces acting on the pathogenic mutation site and on 
the potential compensatory mutation site, the script requires to select which
residues have to be considered with options -R and -D. Single residues can be 
specified either by a number, thus selecting residues according to the consecu-
tive ordering of residues in the PDB file, or through a string containing PDB 
chain and numbering (for instance, A34 for residue 34 of chain A). Multiple
residues both for -D and -R can be selected by supplying selection strings
in prody style. In this case, all the possible combinations of -R and -D
residues are considered. Specifying the same residues for -R and -D will not
be very meaningful, as the displacement vector should be 0; however, in most
cases, as the .h5 file written by dfs uses a lossy compression scheme, very 
small but non-zero differences are to be expected, resulting in a finite
(but not really meaningful) value  of RMSIP.
As for every pair of residues a number of forces having different directions are applied, 
these need to be selected as well, using options -r and -d, that accept either 
a number from 0 to N-1, where N is the number of directions defined in the HDF5 
file, or the keywords "max" or "min" to select the direction of forces that 
give rise to the maximum or the minimum score respectively. Option -n allows to
define the number of modes for which the RMSIP is calculated. Option -t allows
to select which dataset has to be considered from the HDF5 file, between the 
atomic displacements (%s or %s).

The results are printed in the standard output, and consist both of the RMSIP 
value and of the inner product between each single mode and the 
displacement vector.

A typical command line for this script goes like:

    dotM fixed_force_details.h5 original.pdb -R A5 -D A10 -r 1 -d 5 -t %s
""" % (P_XYZ, FP_XYZ, P_XYZ)

min_s = "min"
max_s = "max"

def tupleize(a,b,matrix):
    return ( np.array([a]), np.array([b]) )

def where_max(a,b,matrix):
    return np.where(matrix == np.max(matrix))

def where_min(a,b,matrix):
    return np.where(matrix == np.min(matrix))

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=intro, epilog=outro)
    required_options = parser.add_argument_group('required options')

    required_options.add_argument("-f", "--details", type=str, dest="h5_fname",
                        help="HDF5 details\ file from a DFS calculation", required=True)
    required_options.add_argument("-p", "--pdb", dest="original_pdb", type=str, 
                                  help="Original unperturbed PDB file", required=True)                              
    required_options.add_argument("-R", dest="reference_residue", type=str, default=None, 
help="Pathogenic mutation site", required=True)
    required_options.add_argument("-D", dest="dfs_residue", type=str, default=None, 
help="Secondary site", required=True)

    parser.add_argument("-r", dest="r_score", default=max_s, type=str, 
help="Direction of the force on the pathogenic mutation site")
    parser.add_argument("-d", dest="d_score", default=max_s, type=str, 
help="Direction of the force on the secondary site")
    parser.add_argument("-n", dest="n_modes", help="number of modes", 
default=10, type=int)
    parser.add_argument("-t", dest="data_type", help="data type to be used for\
the calculation of displacements", default=P_XYZ, choices=(P_XYZ, FP_XYZ))
    parser.add_argument("-o", dest="output_file", help="name of text output\
file", default="rmsip.txt")
    parser.add_argument("-m", dest="do_disp_orig", default=False, action="store_true", 
help="Use the coordinates in the PDB instead of the single-force structures to calculate displacements")


    args = parser.parse_args()

    pd.confProDy(verbosity='warning')

    s = pd.parsePDB(args.original_pdb)

    if args.reference_residue.isdigit():
        #ref_r_sel = s.select("protein and resindex %s and name CA" % args.reference_residue)
        ref_r_sel = np.array([int(args.reference_residue)])
    else:
        if len(args.reference_residue.strip().split()) == 1 and args.reference_residue[0].isalpha() \
        and args.reference_residue[0].isupper() and args.reference_residue[1:].lstrip("-").isdigit():
            ref_r_sel_o = s.select("chain %s and resnum %s and name CA" % (args.reference_residue[0],
                                                                     args.reference_residue[1:]))
            if ref_r_sel_o is None:
                ref_r_sel = []
            else:
                ref_r_sel = np.array(ref_r_sel_o.getResindices())
            
            if len(ref_r_sel) > 1:
                log.error("Residue %s%s has more than one CA! Exiting.." % (args.reference_residue[0],\
                                                                     args.reference_residue[1:]))
                exit(1)
        else:
            try:
                ref_r_sel = s.select(args.reference_residue).getResindices()
            except: 
                log.error("Selection string for pathogenic mutation sites is wrong. Exiting...")            
                
    if len(ref_r_sel) < 1:
        log.error("Couldn't find any residue in PDB file that matches option -R. Exiting...")
        exit(1)
        

    if args.dfs_residue.isdigit():
        #dfs_r_sel = s.select("protein and resindex %s and name CA" % args.dfs_residue)
        dfs_r_sel = np.array([int(args.dfs_residue)])
    else:
        if len(args.dfs_residue.strip().split()) == 1 and args.dfs_residue[0].isalpha() \
        and args.dfs_residue[0].isupper() and args.dfs_residue[1:].lstrip("-").isdigit():
            dfs_r_sel_o = s.select("chain %s and resnum %s and name CA" % (args.dfs_residue[0],
                                                                 args.dfs_residue[1:]))
            if dfs_r_sel_o is None:
                dfs_r_sel = []
            else:
                dfs_r_sel = np.array(dfs_r_sel_o.getResindices())

            if len(dfs_r_sel) > 1:
                log.error("Residue %s%s has more than one CA! Exiting.." % (args.dfs_residue[0],\
                                                                     args.dfs_residue[1:]))
                exit(1)
        else:
            try:
                dfs_r_sel = s.select(args.dfs_residue).getResindices()
            except: 
                log.error("Selection string for secondary mutation sites is wrong. Exiting...")
    if len(dfs_r_sel) < 1:
        log.error("Couldn't find any residue in PDB file that matches option -D. Exiting...")
        exit(1)

    pairs = product(ref_r_sel, dfs_r_sel)
    
    h5_fname = args.h5_fname
    n_modes = int(args.n_modes)

    if str.isdigit(args.r_score):
        args.r_score = int(args.r_score)
    if str.isdigit(args.d_score):
        args.d_score = int(args.d_score)

    r_d_idx = [args.r_score, args.d_score]

    if min_s in r_d_idx and max_s in r_d_idx:
        log.error("you can't ask for maximum and minimum at the same time.")
        exit(1)

    if args.r_score == max_s or args.d_score == max_s:
        func = where_max
    elif args.r_score == min_s or args.d_score == min_s:
        func = where_min
    else:
        func = tupleize

    fh = h5py.File(h5_fname, 'r')

    gamma = fh.attrs["gamma"]
    cutoff = fh.attrs["cutoff"]
    
    anm = pd.ANM()
    anm.buildHessian(s, gamma=gamma, cutoff=cutoff)
    anm.calcModes(n_modes=n_modes)
    ev = anm.getEigvecs()
    ds = ev.T.reshape((ev.shape[1],len(s),3))

    pms = []
    rm  = []
    pos = []
    neg = []
    rescued_pms = []
    otherwise_positive = []
    negative  = []
    all_cases = []

    try:
        out_fh = open(args.output_file, 'w')
    except:
        log.error("Couldn't write file %s; exiting..." % args.output_file)
        

    for pair in pairs:
        path = "/%s/%s/" % (pair[0], pair[1])
        path_ref = "/%s/" % (pair[0])

        this_rs = np.array(fh[path][RAW_SCORES])
        n_elms = int(np.sqrt(this_rs.shape[0]))

        where = func(args.r_score, args.d_score, this_rs)
        if where[0].shape[0] > 1:
            where = (np.array([where[0][0]]), np.array([where[1][0]]))
        where_idx = where[0][0]*n_elms + where[1][0]

        selection = "name CA " + " and ".join(["(not resindex %s)"%x for x in pair[0:2]])
        s_sel =   s.select(selection)

        if not args.do_disp_orig:
            ref_coords  = np.array(fh[path_ref][args.data_type])
            s_ref = s.copy()
            s_ref.setCoords(ref_coords[where_idx])
            sel_ref = s_ref.select(selection)
            t = pd.calcTransformation(sel_ref, s_sel)
            t_ref = pd.applyTransformation(t, s_ref)
        else:
            t_ref = s

        this_coords = np.array(fh[path][args.data_type])
        s_dfs = s.copy()
        s_dfs.setCoords(this_coords[where_idx])
        sel_dfs = s_dfs.select(selection)
        t = pd.calcTransformation(sel_dfs, s_sel)
        t_dfs = pd.applyTransformation(t, s_dfs)

        displacements = t_dfs.getCoords() - t_ref.getCoords()

        norm_displacements = displacements / np.linalg.norm(displacements)

        this_sum = 0

        vals = []

        for i,m in enumerate(ds):
            this_val = np.dot(norm_displacements.flatten(), m.flatten())**2
            vals.append(np.sqrt(this_val))
            this_sum += this_val


        rmsip = np.sqrt(this_sum)

        out_fh.write("Residues %s-%d%s, %s-%d%s, score %.3f; RMSIP is %.3f\n" % ( s[pair[0]].getChid(), s[pair[0]].getResnum(), s[pair[0]].getResname(),
                                                                         s[pair[1]].getChid(), s[pair[1]].getResnum(), s[pair[1]].getResname(),
                                                                         this_rs[where],
                                                                         rmsip ))

        for i,v in enumerate(vals):
            out_fh.write("\tMode %i: %.3f\n" % (i,v))
